#!/usr/bin/env python3
# https://coderslegacy.com/python/ctypes-tutorial/

import serial
import time

# TODO:
#   get/set common fields in packets
#   exception class

# exception thrown when error = 0x01
class CameraMessageLengthError(Exception):
    '''
    Camera message length exception.
    '''
    def __init__(self):
        self.message = "Camera message length is invalid."
        super().__init__(self.message)

# Returned when the command format is different or when a command with
# illegal command parameters is accepted.
#
# exception thrown when error = 0x02
class CameraSyntaxError(Exception):
    '''
    Camera message syntax error.
    '''
    def __init__(self):
        self.message = "Camera message syntax is invalid."
        super().__init__(self.message)

# Could not accept a command that is received while two commands are
# currently being executed (two sockets have been used).
#
# exception thrown when error = 0x03
class CameraBufferFullError(Exception):
    '''
    Camera buffer full error.
    '''
    def __init__(self):
        self.message = "Camera message buffer is full."
        super().__init__(self.message)

# Returned when a command which is being executed in a socket specified by
# the cancel command is cancelled. The completion message for the command
# is not returned.
#
# exception thrown when error = 0x04
class CameraCancelError(Exception):
    '''
    Camera error while canceling a message.
    '''
    def __init__(self):
        self.message = "Camera message cancel failed."
        super().__init__(self.message)

# Returned when no command is executed in a socket specified by the cancel
# command, or when an invalid socket number is specified.
#
# exception thrown when error = 0x05
class CameraAddressError(Exception):
    '''
    Camera address is invalid.
    '''
    def __init__(self):
        self.message = "Camera address is invalid."
        super().__init__(self.message)

# exception thrown when error = 0x041
class CameraCommandError(Exception):
    '''
    Camera command is invalid.
    '''
    def __init__(self):
        self.message = "Camera command message is invalid."
        super().__init__(self.message)

# Returned when a command cannot be executed due to current conditions.
# For example, when a command for controlling the manual focus is received
# during the auto focus mode.
#
# exception thrown when error = 0x041
class CameraUnknownError(Exception):
    '''
    Camera command is invalid.
    '''
    def __init__(self):
        self.message = "Unknown error response from camera."
        super().__init__(self.message)

class Camera:
    '''
    Control functions for a single VISCA enabled camera over a
    serial connection using Python byte arrays.
    '''

    # for consistency
    def byte_to_int(self, byte):
        '''
        Internal use only.
        '''
        return int.from_bytes(byte, 'little')

    # for consistency
    def byte_to_hex(self, byte):
        '''
        Internal use only.
        '''
        return hex(self.byte_to_int(byte))

    # for consistency
    def print_resp(self, resp):
        '''
        Internal use only.
        '''
        print(':'.join([self.byte_to_hex(x) for x in resp]))

    # Decode a word in a message received from the camera and return is as an
    # integer.
    def decode_word(self, message, index=2):
        '''
        Internal use only.
        '''
        val = 0
        shift = 12
        for x in message[index:index+4]:
            val |= (self.byte_to_int(x) << shift)
            shift -= 4

        return val

    # Encode a word in a message from an integer.
    def encode_word(self, message, value, index=2):
        '''
        Internal use only.
        '''
        return message

    # Decode a short (16 bits) in a message received from the camera and return is as an
    # integer.
    def decode_short(self, message, index=4):
        '''
        Internal use only.
        '''
        return 0

    # Encode a short (16 bits) in a message from an integer.
    def encode_short(self, message, value, index=4):
        '''
        Internal use only.
        '''
        return message

    # Decode a byte from the given response.
    def decode_byte(self, message, index):
        '''
        Internal use only.
        '''
        return self.byte_to_int(message[index])

    # Encode a byte into the message at the given index.
    def encode_byte(self, message, value, index):
        '''
        Internal use only.
        '''
        message[index] = value.to_bytes(1, 'little')

    # Iterate through the byte array and send the bytes through the
    # serial port.
    def send_message(self, data):
        '''
        Internal use only.
        '''
        for b in data:
            self.link.write(b)

        # Give the camera a little time to react.
        time.sleep(0.25)

        return self.check_error()


    # Receive bytes from the serial port into an array. Return the raw
    # array without checking for errors. The caller is responsible for
    # checking to see if an error happened.
    def receive_message(self):
        '''
        Internal use only.
        '''
        x = []
        v = 0
        while v != b'\xff':
            v = self.link.read(1)
            x.append(v)

        return x

    # Check for an error and raise an exception if one has taken place.
    # Otherwise return the raw response for further processing.
    def check_error(self):
        '''
        Internal use only.
        '''
        resp = self.receive_message()
        #self.print_resp(resp)
        if self.byte_to_int(resp[1]) & 0xF0 != 0x50:
            if self.byte_to_int(resp[2]) & 0xFF == 0x41:
                raise CameraCommandError
            elif self.byte_to_int(resp[2]) & 0x0F == 0x01:
                raise CameraMessageLengthError
            elif self.byte_to_int(resp[2]) & 0x0F == 0x02:
                raise CameraSyntaxError
            elif self.byte_to_int(resp[2]) & 0x0F == 0x03:
                raise CameraBufferFullError
            elif self.byte_to_int(resp[2]) & 0x0F == 0x04:
                raise CameraCancelError
            elif self.byte_to_int(resp[2]) & 0x0F == 0x05:
                raise CameraAddressError

        return resp

    # Verify that the camera is responding to the ping.
    def check_ack(self):
        resp = self.receive_message()
        if self.byte_to_int(resp[1]) & 0xF0 != 0x40:
            raise Exception("bad ping")

    ###########################
    # Public interface
    ###########################
    def __init__(self, device='/dev/ttyUSB0', timeout=0.5):
        '''
        Create the camera object.
        '''
        self.device = device
        self.link = serial.Serial(device, timeout=timeout)
        self.reset()

    def close(self):
        '''
        Close the serial link.
        '''
        self.link.close()


    def get_zoom_pos(self):
        '''
        Get the current zoom position.

        Resp: 90 50 0p 0q 0r 0s ff: pqrs = zoom position
        '''
        data = [b'\x81', b'\x09', b'\x04', b'\x47', b'\xff']
        resp = self.send_message(data)
        return self.decode_word(resp)

    def get_focus_pos(self):
        '''
        Get the current focus position.

        Resp: 90 50 0p 0q 0r 0s ff: pqrs = focus position
        '''
        data = [b'\x81', b'\x09', b'\x04', b'\x48', b'\xff']
        resp = self.send_message(data)
        #self.print_resp(resp)
        return self.decode_word(resp)

    def get_focus_mode(self):
        '''
        Get the current focus mode.

        Resp: 90 50 0p ff: pqrs = focus mode
        '''
        data = [b'\x81', b'\x09', b'\x04', b'\x38', b'\xff']
        resp = self.send_message(data)
        #self.print_resp(resp)
        val = self.decode_byte(resp, 2)
        self.focus_mode = 'unknown'
        if val == 0x02:
            self.focus_mode = 'auto'
        elif val == 0x03:
            self.focus_mode = 'manual'
        else:
            raise CameraUnknownError

        return self.focus_mode

    def get_pan_tilt_pos(self):
        '''
        Get the pan and tilt position. Returns a dict where
        {"pan": int, "tilt": int}

        Resp: 90 50 0p 0q 0r 0s 0t 0u 0v 0w ff
        pqrs: pan position
        tuvw: tilt position
        '''
        data = [b'\x81', b'\x09', b'\x06', b'\x12', b'\xff']
        resp = self.send_message(data)
        #self.print_resp(resp)
        retv = {}
        retv['pan'] = self.decode_word(resp)
        retv['tilt'] = self.decode_word(resp, index=6)
        #print(retv)
        return retv

    def get_wb_mode(self):
        '''
        Return the white balance mode.

        Resp: 90 50 0x FF
        x: 0 = auto
        x: 1 = indoor
        x: 2 = outdoor
        x: 3 = one push
        x: 5 = manual
        '''
        data = [b'\x81', b'\x09', b'\x04', b'\x35', b'\xff']
        resp = self.send_message(data)
        val = self.decode_byte(resp, 2)
        self.wb_mode = 'unknown'
        if val == 0x00:
            self.wb_mode = 'auto'
        elif val == 0x01:
            self.wb_mode = 'indoor'
        elif val == 0x02:
            self.wb_mode = 'outdoor'
        elif val == 0x03:
            self.wb_mode = 'one push'
        elif val == 0x05:
            self.wb_mode = 'manual'
        else:
            raise CameraUnknownError

        return self.wb_mode

    def get_ae_mode(self):
        '''
        Return the Auto Exposure mode.

        Resp: 90 50 0x FF
        x: 0 = full auto
        x: 3 = manual
        x: A = shutter priority
        x: B = iris priority
        x: D = bright
        '''
        data = [b'\x81', b'\x09', b'\x04', b'\x39', b'\xff']
        resp = self.send_message(data)
        val = self.decode_byte(resp, 2)
        self.ae_mode = 'unknown'
        if val == 0x00:
            self.ae_mode = 'auto'
        elif val == 0x03:
            self.ae_mode = 'manual'
        elif val == 0x0A:
            self.ae_mode = 'shutter'
        elif val == 0x0B:
            self.ae_mode = 'iris'
        elif val == 0x0D:
            self.ae_mode = 'bright'
        else:
            raise CameraUnknownError

        return self.ae_mode

    def get_shutter_pos(self):
        '''
        Resp: y0 50 00 00 0p 0q FF
        '''
        data = [b'\x81', b'\x09', b'\x04', b'\x4A', b'\xFF']
        resp = self.send_message(data)
        return self.decode_short(resp, index=4)

    def get_iris_pos(self):
        '''
        Resp: y0 50 00 00 0p 0q FF
        '''
        data = [b'\x81', b'\x09', b'\x04', b'\x4B', b'\xFF']
        resp = self.send_message(data)
        return self.decode_short(resp, index=4)

    def get_gain_pos(self):
        '''
        Resp: y0 50 00 00 0p 0q FF
        '''
        data = [b'\x81', b'\x09', b'\x04', b'\x4C', b'\xFF']
        resp = self.send_message(data)
        return self.decode_short(resp, index=4)

    def get_bright_pos(self):
        '''
        Resp: y0 50 00 00 0p 0q FF
        '''
        data = [b'\x81', b'\x09', b'\x04', b'\x4D', b'\xFF']
        resp = self.send_message(data)
        return self.decode_short(resp, index=4)

    ################################################
    # Command the camera to do something
    def reset(self):
        '''
        Reset the position of the camera and re-initialize the motors.
        No parameters.
        '''
        data = [b'\x81', b'\x01', b'\x06', b'\x05', b'\xff']
        self.send_message(data)
        time.sleep(1)

    def clear(self):
        '''
        Cancel any outstanding commands and clear the camera buffers.
        '''
        data = [b'\x81', b'\x01', b'\x00', b'\x01', b'\xff']
        self.send_message(data)
        time.sleep(1)
